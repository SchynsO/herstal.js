{"version":3,"sources":["herstal.client.min.js"],"names":["_typeof","Symbol","iterator","obj","constructor","CharacterModel","character","options","this","worldRender","characterModel","geometry","material","mesh","THREE","Mesh","CurrentPlayer","player","waitInput","document","addEventListener","eventHandler","e","preventDefault","Client","address","socket","io","connect","Canvas","id","resX","resY","armsRender","div","body","getElementById","Error","renderer","WebGLRenderer","setSize","appendChild","domElement","WorldRender","world","camera","scene","Scene","characterModels","HERSTALclient","window","HERSTALprefs","HERSTALshared","prototype","animate","animation","event","btn","isMouse","wheelDelta","deltaY","delta","Math","max","min","button","which","keyCode","tag","INPUTS","mouse","keyboard","inputs","movement","x","y","weapon","substr","CooMan","option","renderUpdate","render","addCharacterModel","addElement","add","removeCharacterModel","index","removeElement","remove"],"mappings":"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","file":"herstal.client.min.js","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function () {\n  var HERSTALclient = {};\n\n  if (!window || !document) throw new Error(\"This librairy is meant to be used in a web browser\");\n\n  window.HERSTALclient = HERSTALclient;\n\n  if (!io) throw new Error('Herstal.client needs Socket.io to work');\n  if (!HERSTALprefs) throw new Error('Herstal.client needs Herstal.preferences to work');\n  if (!HERSTALshared) throw new Error('Herstal.client needs Herstal.shared to work');\n\n  /**\r\n   * Class to manage characters appearance and animations\r\n   */\n  function CharacterModel(character, options) {\n    options = options || {};\n\n    // the worldRender of the model\n    this.worldRender = null;\n    this.character = character;\n\n    this.character.characterModel = this;\n\n    this.geometry = null;\n    this.material = null;\n    this.mesh = new THREE.Mesh(this.geometry, this.material);\n  }\n  // we add the class to the module\n  CharacterModel.prototype.constructor = HERSTALclient.CharacterModel = CharacterModel;\n\n  CharacterModel.prototype.animate = function (animation) {};\n\n  /**\r\n   * This class represent the current player\r\n   */\n  function CurrentPlayer(player) {\n\n    // the regular data regarding the player\n    this.player = player;\n    this.waitInput = false;\n\n    // use listener instead of onkeydown for compatibility with firefox\n    document.addEventListener('mousedown', this.eventHandler, false);\n    document.addEventListener('keydown', this.eventHandler, false);\n    document.addEventListener('wheel', this.eventHandler, false);\n    document.addEventListener(\"contextmenu\", function (e) {\n      e.preventDefault();\n    }, false);\n  }\n  // we add the class to the module\n  CurrentPlayer.prototype.constructor = HERSTALclient.CurrentPlayer = CurrentPlayer;\n\n  /**\r\n   * Handle event such as keypress and mouse button and store the result\r\n   * in the inputs of the character if present\r\n   */\n  CurrentPlayer.prototype.eventHandler = function (e) {\n    // if we are waiting for a new input and we have a character associated\n    if (this.waitInput && this.player.character) {\n      // we recover the event\n      e = e || window.event;\n\n      var btn = null,\n          isMouse = false;\n      if (e.wheelDelta || e.deltaY) {\n        // mouse wheel\n        // we recover the delta of the mouse wheel\n        var delta = Math.max(-1, Math.min(1, e.wheelDelta || -e.deltaY));\n        // if delta is not null or zero\n        // -1 is up, -2 is down\n        if (delta) {\n          btn = delta > 0 ? -1 : -2;\n          isMouse = true;\n        }\n      } else if (e.button != null) {\n        // mouse button\n        btn = e.button;\n        isMouse = true;\n      } else if (e.which || e.keyCode) {\n        // keyboard key\n        btn = typeof e.which == \"number\" ? e.which : e.keyCode;\n      }\n\n      // if our event match a key or mouse input\n      if (btn != null) {\n        // we recover the action this button activate\n        var tag = isMouse ? CurrentPlayer.INPUTS.mouse[btn] : CurrentPlayer.INPUTS.keyboard[btn];\n\n        // we create a new object to store our inputs\n        var inputs = this.player.character.inputs = {};\n        inputs.movement = { x: 0, y: 0 };\n        inputs.weapon = null;\n        // some action have a specific behavior\n        // if the tag begin with weap\n        if (tag.substr(0, 4) == \"weap\") {\n          // we just recover the number of the weapon\n          inputs.weapon = tag.substr(4, 1);\n        } else switch (tag) {\n          // movement inputs\n          case \"moveF\":\n            ++inputs.movement.y;break;\n          case \"moveB\":\n            --inputs.movement.y;break;\n          case \"moveL\":\n            --inputs.movement.x;break;\n          case \"moveR\":\n            ++inputs.movement.x;break;\n          // weapon management bis\n          case \"prevWeap\":\n            inputs.weapon = -1;break;\n          case \"nextWeap\":\n            inputs.weapon = -2;break;\n          // if we haven't specified a special rule, than we are just pressing the input\n          default:\n            inputs[tag] = true;\n        }\n      }\n    }\n  };\n\n  // we store the inputs the following way:\n  // keyvalue => action\n  CurrentPlayer.INPUTS = {\n    mouse: {},\n    keyboard: {}\n  };\n  // we fill the INPUTS with the content of CooMan\n  for (var id in CooMan.options) {\n    var option = CooMan.options[id];\n    // if the options is an object\n    if ((typeof option === 'undefined' ? 'undefined' : _typeof(option)) === \"object\") {\n      // if the object as a btn attribute\n      if (option.btn != null) {\n        // if it as a isMouse attribute set to true\n        if (option.isMouse) CurrentPlayer.INPUTS.mouse[option.btn] = id;else CurrentPlayer.INPUTS.keyboard[option.btn] = id;\n      }\n    }\n  }\n\n  /**\r\n   * Allow us to manage connections between client and server\r\n   */\n  function Client(address) {\n\n    // we create a socket that will allow us to communicate with the server\n    this.socket = io.connect(address);\n  }\n  // we add the class to the module\n  Client.prototype.constructor = HERSTALclient.Client = Client;\n\n  /**\r\n   * Class to create a canvas, you should use only one for your web page\r\n   */\n  function Canvas(id, resX, resY, worldRender, armsRender) {\n\n    var div = document.body.getElementById(id);\n    if (!div) throw new Error(\"the given id doesn't match any div of the document\");\n\n    // we create the renderer\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(resX, resY);\n    div.appendChild(this.renderer.domElement);\n\n    this.worldRender = worldRender;\n    this.armsRender = armsRender;\n  }\n  // we add the class to the module\n  Canvas.prototype.constructor = HERSTALclient.Canvas = Canvas;\n\n  /**\r\n   * render the scene 60 times per second from the camera\r\n   */\n  Canvas.prototype.renderUpdate = function () {\n\n    // do stuff\n\n    // first we render the world scene if it exist\n    if (this.worldRender) {\n      if (this.worldRender.scene && this.worldRender.camera) {\n        this.renderer.render(this.worldRender.scene, this.worldRender.camera);\n      }\n    }\n    // then we render the arms scene if it exists\n    if (this.armsRender) {\n      if (this.armsRender.scene && this.armsRender.camera) {\n        this.renderer.render(this.armsRender.scene, this.armsRender.camera);\n      }\n    }\n  };\n\n  /**\r\n   * Class to render the world based on the HERSTALshared world\r\n   * @param {HERSTALshared.World} world - the world to render\r\n   * @param {THREE.Camera} camera - the camera from where to render the world, can be null\r\n   */\n  function WorldRender(world, camera) {\n    this.world = world;\n    this.camera = camera;\n\n    this.scene = new THREE.Scene();\n\n    this.characterModels = [];\n  }\n  WorldRender.prototype.constructor = HERSTALclient.WorldRender = WorldRender;\n\n  WorldRender.prototype.addCharacterModel = function (characterModel) {\n    // since we are in a web browser, we can use the method addElement defined in HERSTALshared\n    this.characterModels.addElement(characterModel);\n    // the characterModel shoudl in which world it is\n    characterModel.worldRender = this;\n    // we add the model itself to the scene\n    this.scene.add(characterModel.mesh);\n  };\n\n  WorldRender.prototype.removeCharacterModel = function (characterModel) {\n    var index = this.characterModels.removeElement(characterModel);\n    // if the character was in the array\n    if (index > -1) {\n      characterModel.worldRender = null;\n      this.scene.remove(characterModel.mesh);\n    }\n  };\n})();"],"sourceRoot":"/source/"}