{"version":3,"sources":["userPreferences.min.js"],"names":["option","CooMan","options","input","value","getLabelForKey","line","document","getElementById","btn","getElementsByClassName","type","checked","change_input","msg","bg","isVisible","setVisible","visible","display","this","style","setText","text","getElementsByTagName","innerHTML","currentInput","onBtnPressed","parentElement","innerText","eventHandler","e","end","window","event","wheelDelta","deltaY","delta","Math","max","min","isMouse","button","which","keyCode","id","addEventListener","preventDefault","savePreferences","write","console","log"],"mappings":"AACA,IAAK,GAAIA,UAAUC,QAAOC,QAAS,CAClC,GAAIC,OAAQF,OAAOC,QAAQF,QACvBI,KAC2BA,OAAX,gBAATD,OAA4BF,OAAOI,eAAeF,OAChDA,KACb,IAAIG,MAAOC,SAASC,eAAeR,OACnC,IAAGM,KAAK,CACP,GAAIG,KAAMH,KAAKI,uBAAuB,aAAa,EAChDD,OAEa,YAAZA,IAAIE,KAAoBF,IAAIL,MAAQA,MAE/BA,QAAOK,IAAIG,SAAU,KAKhC,GAAIC,eACHC,IAAMP,SAASC,eAAe,oBAC9BO,GAAMR,SAASC,eAAe,mBAC9BQ,WAAY,EAEZC,WAAa,SAASC,GACrB,GAAIC,GAAUD,EAAU,QAAU,MAClCE,MAAKN,IAAIO,MAAMF,QAAUA,EACzBC,KAAKL,GAAIM,MAAMF,QAAUA,EACzBC,KAAKJ,UAAYE,GAGlBI,QAAU,SAASC,GAClB,GAAIpB,GAAQiB,KAAKN,IAAIU,qBAAqB,KAAK,EAC/CrB,GAAMsB,UAAYF,GAIpBV,cAAaI,YAAW,EAExB,IAAIS,cAAe,KACfC,aAAe,SAASlB,GAC3BI,aAAaI,YAAW,GACxBS,aAAejB,EAAImB,cAAcA,cACjCf,aAAaS,QAAQI,aACpBhB,uBAAuB,aAAa,GAAGmB,YAErCC,aAAe,SAASC,GAE3B,GAAIC,GAAM,WAETnB,aAAaI,YAAW,GACxBS,aAAe,KAIhB,IAAGb,aAAaG,WAAaU,aAAa,CACzCK,EAAIA,GAAKE,OAAOC,KAChB,IAAI/B,EACJ,IAAG4B,EAAEI,YAAcJ,EAAEK,OAAO,CAE3B,GAAIC,GAAQC,KAAKC,IAAI,GAAID,KAAKE,IAAI,EAAIT,EAAEI,aAAeJ,EAAEK,QAGtDC,KAAOlC,GAASM,IAAM4B,EAAQ,EAAK,GAAK,GAAII,SAAS,QAEnD,IAAe,MAAZV,EAAEW,OACVvC,GAASM,IAAKsB,EAAEW,OAAQD,SAAS,OAE5B,IAAGV,EAAEY,OAASZ,EAAEa,QAAQ,CAC7B,GAAIA,GAA6B,gBAAXb,GAAEY,MAAqBZ,EAAEY,MAAQZ,EAAEa,OACzD,QAAOA,GACN,IAAK,IAAKZ,GACV,KAAK,IAAK,KACV,SAAU7B,GAASM,IAAKmC,IAG1B3C,OAAOC,QAAQwB,aAAamB,IAAM1C,CAElC,IAAIM,GAAMiB,aAAahB,uBAAuB,aAAa,EAC3DD,GAAIL,MAAQH,OAAOI,eAAeF,GAEnC6B,IAGDzB,UAASuC,iBAAiB,YAAahB,cAAc,GACrDvB,SAASuC,iBAAiB,UAAahB,cAAc,GACrDvB,SAASuC,iBAAiB,QAAahB,cAAc,GACrDvB,SAASuC,iBAAiB,cAAe,SAASf,GAC9CA,EAAEgB,mBACH,EAEH,IAAIC,iBAAkB,WAErB/C,OAAOgD,QACPC,QAAQC,IAAI","file":"userPreferences.min.js","sourcesContent":["// initialize the value of each button\r\nfor( var option in CooMan.options ){\r\n\tvar input = CooMan.options[option];\r\n\tvar value;\r\n\tif( typeof input == \"object\" ) value = CooMan.getLabelForKey(input);\r\n\telse value = input;\r\n\tvar line = document.getElementById(option);\r\n\tif(line){\r\n\t\tvar btn = line.getElementsByClassName(\"key-input\")[0];\r\n\t\tif(btn){\r\n\t\t\t// if it's not a checkbox, we just assign the value\r\n\t\t\tif(btn.type != \"checkbox\") btn.value = value;\r\n\t\t\t// if it's a checkbox, we need to add a checked attribute\r\n\t\t\telse if(value) btn.checked = true;\r\n\t\t} //else console.log(\"btn : \"+option);\r\n\t} //else console.log(\"line : \"+option);\r\n}\r\n// keep track of the message that ask the user to enter a key input\r\nvar change_input = {\r\n\tmsg : document.getElementById(\"change-input-msg\"),\r\n\tbg  : document.getElementById(\"change-input-bg\"),\r\n\tisVisible : false,\r\n\t// display the message or hide it\r\n\tsetVisible : function(visible){\r\n\t\tvar display = visible ? \"block\" : \"none\";\r\n\t\tthis.msg.style.display = display;\r\n\t\tthis.bg .style.display = display;\r\n\t\tthis.isVisible = visible;\r\n\t},\r\n\t// set the input label to display\r\n\tsetText : function(text){\r\n\t\tvar input = this.msg.getElementsByTagName(\"b\")[0];\r\n\t\tinput.innerHTML = text;\r\n\t}\r\n};\r\n// the user hasn't clicked on a button yet, we hide the message\r\nchange_input.setVisible(false);\r\n// when the user click on a button to edit an input\r\nvar currentInput = null; // hold the input we are currently editing\r\nvar onBtnPressed = function(btn){\r\n\tchange_input.setVisible(true);\r\n\tcurrentInput = btn.parentElement.parentElement;\r\n\tchange_input.setText(currentInput.\r\n\t\tgetElementsByClassName(\"key-label\")[0].innerText);\r\n};\r\nvar eventHandler = function(e){\r\n\t// when we have assigned the key, we hide the message\r\n\tvar end = function(){\r\n\t\t// we can hide the message\r\n\t\tchange_input.setVisible(false);\r\n\t\tcurrentInput = null;\r\n\t\treturn;\r\n\t};\r\n\t// as long as the message asking for a key input is visible\r\n\tif(change_input.isVisible && currentInput){\r\n\t\te = e || window.event;\r\n\t\tvar input;\r\n\t\tif(e.wheelDelta || e.deltaY){ // if it's the mouse wheel\r\n\t\t\t// we recover the delta of the mouse wheel\r\n\t\t\tvar delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.deltaY)));\r\n\t\t\t// if delta is not null or zero\r\n\t\t\t// -1 is up, -2 is down\r\n\t\t\tif(delta) input = {btn: (delta > 0) ? -1 : -2, isMouse: true};\r\n\r\n\t\t}else if(e.button != null){ // if it's a mouse button\r\n\t\t\tinput = {btn: e.button, isMouse: true};\r\n\r\n\t\t}else if(e.which || e.keyCode){ // if it's a keyboard key\r\n\t\t\tvar keyCode = (typeof e.which == \"number\") ? e.which : e.keyCode;\r\n\t\t\tswitch(keyCode){\r\n\t\t\t\tcase 27 : end(); // if ESC, we cancel\r\n\t\t\t\tcase 46 : break; // if DEL, input will be NONE\r\n\t\t\t\tdefault : input = {btn: keyCode};\r\n\t\t\t}\r\n\t\t}\r\n\t\tCooMan.options[currentInput.id] = input; // we update the preferences\r\n\t\t// we update the value displayed in the button\r\n\t\tvar btn = currentInput.getElementsByClassName(\"key-input\")[0];\r\n\t\tbtn.value = CooMan.getLabelForKey(input);\r\n\t}\r\n\tend();\r\n};\r\n// use listener instead of onkeydown for compatibility with firefox\r\ndocument.addEventListener('mousedown', eventHandler, false);\r\ndocument.addEventListener('keydown'  , eventHandler, false);\r\ndocument.addEventListener('wheel'    , eventHandler, false);\r\ndocument.addEventListener(\"contextmenu\", function(e){\r\n    e.preventDefault();\r\n}, false);\r\n\r\nvar savePreferences = function(){\r\n\t// we save the user preferences in a cookie\r\n\tCooMan.write();\r\n\tconsole.log(\"cookie saved\");\r\n};\r\n"],"sourceRoot":"/source/"}